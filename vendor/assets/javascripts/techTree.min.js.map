{"version":3,"sources":["js/settings.js","js/plotHelper.js","js/eventHelper.js","js/nodeHelper.js","js/linkHelper.js","js/imageUtils.js","js/jsonLoader.js","js/techTree.js"],"names":["techTree","api","offsets","settings","wrapper","downloadWrapper","nodeOrientation","imageRendering","imageDownloadFileName","useSpriteSheet","spriteSheetFileName","imageFolderName","useShadows","initialLinkColor","dimensions","svgInitialWidth","window","innerWidth","svgInitialHeight","innerHeight","nodeOuterWidth","nodeOuterHeight","nodeInnerBorder","nodeInnerWidth","nodeInnerHeight","spriteSheetWidth","spriteSheetHeight","margin","top","right","bottom","left","durations","activateLink","activateNode","loadSettings","newSettings","Object","keys","forEach","key","loadOffsets","offsetsData","frames","offset","filename","frame","meta","size","w","h","orientNodes","d","depths","vertical","horizontal","circular","orientLinks","x","depth","y","_depthElementCount","svgHeight","svgWidth","Math","cos","PI","sin","lineFunction","d3","svg","diagonal","source","target","projection","clickHandler","nodesByName","selected","otherSelected","requirements","length","i","datum","updateNode","name","updateLinks","select","on","saveSvgAsPng","node","initializeBorder","container","append","attr","style","initializeImages","image","pNode","initializeNodes","nodes","enter","c","this","transition","duration","linksBySource","initializeLinks","links","insert","pLink","push","selectable","j","other","setupImageUtils","shadow","offsetKey","createTreeFromJSON","config","json","offsetsFileName","error","jsonOffsets","console","warn","dataFileName","settingsFileName","createTree","linksData","nodesDataMap","_clear","deleteTree","remove","appendSVG","parseNodesData","nodesData","nodeData","r","jsonNodesData","layout","force","values","start","init","selectAll","data"],"mappings":"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","file":"js/techTree.min.js","sourcesContent":["var techTree = (function(api){\n    //offsets\n    api.offsets = api.offsets || {};\n\n    //defaults\n    api.settings = {\n        wrapper : \"#svg\",\n        downloadWrapper: \"#save\",\n        nodeOrientation: \"vertical\",\n        //linkOrientation: \"\",\n        imageRendering : \"pixelated\",\n        imageDownloadFileName : \"taco.png\",\n        useSpriteSheet : false,\n        spriteSheetFileName : \"spritesheet.png\",\n        imageFolderName: \"images/high_res\",\n        useShadows: true,\n        initialLinkColor: \"none\"\n    };\n\n    api.dimensions = {\n        svgInitialWidth: window.innerWidth,\n        svgInitialHeight: window.innerHeight,\n        nodeOuterWidth: 120,\n        nodeOuterHeight: 120,\n        nodeInnerBorder: 2,\n        nodeInnerWidth: 64,\n        nodeInnerHeight: 64,\n        spriteSheetWidth: 512,\n        spriteSheetHeight: 512,\n        margin: {top: 20,right: 0,bottom: 20,left: 0}\n    };\n    api.durations = {\n        activateLink: 750,\n        activateNode: 250\n    };\n    api.loadSettings = function(settings){\n        var newSettings = settings || {};\n        //general settings\n        newSettings.settings = newSettings.settings || {};\n        Object.keys(api.settings).forEach(function(key){\n            if(newSettings.settings[key] != null){\n                api.settings[key] = newSettings.settings[key];\n            }\n        });\n        //dimensions\n        newSettings.dimensions = newSettings.dimensions || {};\n        Object.keys(api.dimensions).forEach(function(key){\n            api.dimensions[key] = newSettings.dimensions[key] || api.dimensions[key];\n        });\n        //durations\n        newSettings.durations = newSettings.durations || {};\n        api.durations.activateLink = newSettings.durations.activateLink || api.durations.activateLink;\n        api.durations.activateNode = newSettings.durations.activateNode || api.durations.activateNode;\n    };\n    api.loadOffsets = function loadOffsets(offsets){\n        api.offsetsData = offsets;\n        offsets.frames.forEach(function(offset){\n            api.offsets[offset.filename] = offset.frame;\n        });\n        api.offsets.default = api.offsets.default || offsets.frames[0].frame;\n        api.dimensions.spriteSheetWidth = offsets.meta.size.w;\n        api.dimensions.spriteSheetHeight = offsets.meta.size.h;\n    };\n    return api;\n}(techTree || {}));\n","var techTree = (function(api){\n    api.orientNodes = function(d, depths){\n        switch(api.settings.nodeOrientation){\n            case \"vertical\":\n                api.orientNodes.vertical(d, depths);\n                break;\n            case \"horizontal\":\n                api.orientNodes.horizontal(d, depths);\n                break;\n            case \"circular\":\n                api.orientNodes.circular(d, depths);\n                break;\n            default:\n                api.orientNodes.vertical(d, depths);\n                break;\n        }\n        api.orientLinks();\n    };\n    api.orientNodes.horizontal = function(d, depths){\n        d.x = d.depth * api.dimensions.nodeOuterHeight;\n        d.y = d._depthElementCount * api.dimensions.svgHeight/(depths[d.depth]+1) -\n            api.dimensions.nodeInnerHeight/2;\n    };\n    api.orientNodes.vertical = function(d, depths){\n        d.x = d._depthElementCount * api.dimensions.svgWidth/(depths[d.depth]+1) -\n            api.dimensions.nodeInnerWidth/2;\n        d.y = d.depth * api.dimensions.nodeOuterHeight;\n    };\n    api.orientNodes.circular = function(d, depths){\n        d.x = api.dimensions.svgWidth/2 -\n            api.dimensions.nodeInnerWidth/2 +\n            120*d.depth*Math.cos(2*d._depthElementCount*Math.PI/depths[d.depth]);\n        d.y = api.dimensions.svgHeight/2 -\n            api.dimensions.nodeInnerHeight/2 +\n            120*d.depth*Math.sin(2*Math.PI*d._depthElementCount/depths[d.depth]);//d.depth * api.dimensions.nodeOuterHeight;\n    };\n    api.orientLinks = function(){\n        switch(api.settings.nodeOrientation){\n            case \"vertical\":\n                api.lineFunction = api.orientLinks.vertical;\n                break;\n            case \"horizontal\":\n                api.lineFunction = api.orientLinks.horizontal;\n                break;\n            case \"circular\":\n                api.lineFunction = api.orientLinks.horizontal;\n                break;\n            default:\n                api.lineFunction = api.orientLinks.vertical;\n                break;\n        }\n    };\n    api.orientLinks.horizontal = d3.svg\n        .diagonal()\n        .source(function(d) { return {x:d.source.y, y:d.source.x}; })\n        .target(function(d) { return {x:d.target.y, y:d.target.x}; })\n        .projection(function(d) {\n                    return [d.y+ api.dimensions.nodeInnerHeight/2,\n                        d.x + api.dimensions.nodeInnerWidth/2];\n        });\n    api.orientLinks.vertical = d3.svg\n        .diagonal()\n        .projection(function (d) {\n            return [d.x+ api.dimensions.nodeInnerWidth/2,\n                d.y + api.dimensions.nodeInnerHeight/2];\n        }\n    );\n    return api;\n}(techTree || {}));\n","var techTree = (function(api){\n    // Toggle children on click.\n    api.clickHandler = function clickHandler(d, nodesByName) {\n        if(!d.selected){\n            var otherSelected = true;\n            if(d.requirements && d.requirements.length){\n                for(var i=0;i< d.requirements.length; i+=1){\n                    otherSelected = otherSelected && (nodesByName[d.requirements[i]].datum().selected === true);\n                }\n            }\n            if(otherSelected){\n                d.selected = true;\n                techTree.updateNode(nodesByName[d.name]);\n                techTree.updateLinks(d, nodesByName);\n            }\n        }\n    };\n    d3.select(api.settings.downloadWrapper).on(\"click\", function(){\n        saveSvgAsPng(d3.select(\"svg\").node(),api.settings.imageDownloadFileName);\n    });\n    return api;\n}(techTree || {}));\n","var techTree = (function(api){\n    var initializeBorder = function initializeBorder(container) {\n        container.append(\"rect\")\n            .attr(\"width\", api.dimensions.nodeInnerWidth + 2*api.dimensions.nodeInnerBorder)\n            .attr(\"height\", api.dimensions.nodeInnerHeight + 2*api.dimensions.nodeInnerBorder)\n            .style(\"filter\",api.settings.useShadows? \"url(#dropshadow)\":\"\");\n    };\n    var initializeImages = function initializeImages(container){\n        var offset;\n        var image = container\n            .append(\"svg\")\n            .attr(\"viewBox\",function(d){\n                if(api.settings.useSpriteSheet) {\n                    offset = api.offsets[d.name] || api.offsets.default;\n                    return \"0 0 \" + offset.w + \" \" + offset.h;\n                }\n                else{\n                    return \"0 0 \" + api.dimensions.nodeInnerWidth + \" \" + api.dimensions.nodeInnerHeight;\n                }\n            })\n            .attr(\"preserveAspectRatio\",\"xMidYMid meet\")\n            .attr(\"x\",api.dimensions.nodeInnerBorder)\n            .attr(\"y\",api.dimensions.nodeInnerBorder)\n            .attr(\"width\",api.dimensions.nodeInnerWidth)\n            .attr(\"height\",api.dimensions.nodeInnerHeight)\n            .append(\"image\")\n            .attr(\"image-rendering\",api.settings.imageRendering)\n            .attr(\"xlink:href\",function(d){\n                if(api.settings.useSpriteSheet){\n                    return api.settings.imageFolderName+\"/\"+api.settings.spriteSheetFileName;\n                }\n                else{\n                    return api.settings.imageFolderName+\"/\"+d.name+\".png\";\n                }\n            })\n            .attr(\"x\",0)\n            .attr(\"y\",0)\n            .attr(\"width\", api.settings.useSpriteSheet?\n                api.dimensions.spriteSheetWidth: api.dimensions.nodeInnerWidth)\n            .attr(\"height\", api.settings.useSpriteSheet?\n                api.dimensions.spriteSheetHeight: api.dimensions.nodeInnerHeight)\n            .style(\"filter\",function(pNode){\n                return pNode.selected? \"\": \"url(#desaturate)\";\n            });\n        //if needed\n        if(api.settings.useSpriteSheet){\n            image\n                .attr(\"clip-path\", function(d){return \"url(#clip-\"+d.name+\")\";})\n                .attr(\"transform\", function(d){\n                    offset = api.offsets[d.name] || api.offsets.default;\n                    return \"translate(-\"+offset.x+\",-\"+offset.y+\")\";\n                });\n        }\n    };\n    api.initializeNodes = function initializeNodes(nodes, nodesByName){\n        nodes.enter().append(\"g\")\n            .attr(\"class\", \"node\")\n            .attr(\"id\",function(pNode,c){\n                nodesByName[pNode.name] = d3.select(this);\n                return c;\n            })\n            .on(\"click\", function(pNode){\n                return api.clickHandler(pNode, nodesByName);\n            })\n            // Transition nodes to their new position.\n            .attr(\"transform\", function(d){\n                return \"translate(\" + d.x + \",\" + d.y + \")\";\n            });\n\n        initializeBorder(nodes);\n        initializeImages(nodes);\n    };\n    api.updateNode = function updateNode(node) {\n        node\n            .transition()\n            .duration(api.durations.activateNode)\n            .select(\"rect\").style(\"fill\",\"#ffcf70\").style(\"stroke\",\"#FFBB33\");\n        node.select(\"image\").style(\"filter\", \"\");\n    };\n    return api;\n}(techTree || {}));\n","var techTree = (function(api){\n    var linksBySource = {};\n\n    api.initializeLinks = function initializeLinks(links){\n        links.enter().insert(\"path\", \"g\")\n            .attr(\"class\", \"link\")\n            .attr(\"id\", function(pLink){\n                linksBySource[pLink.source.name] = linksBySource[pLink.source.name] || [];\n                linksBySource[pLink.source.name].push(d3.select(this));\n                return pLink.source.name+\"-\"+pLink.target.name;\n            })\n            .attr(\"d\",api.lineFunction)\n            .style(\"stroke\",function(pLink){\n                return pLink.source.selected? \"#FFBB33\": api.settings.initialLinkColor;\n            });\n    };\n    api.updateLinks = function updateLinks(node, nodesByName){\n\n        var links = linksBySource[node.name];\n        if(links && links.length){\n            for (var i=0;i<links.length;i+=1) {\n                links[i]\n                    .transition()\n                    .duration(api.durations.activateLink)\n                    .style(\"stroke\", \"#FFBB33\");\n\n                var d = links[i].datum().target;\n                var name = d.name;\n                var selectable = true;\n\n                if(d.requirements){\n                    for(var j=0;j< d.requirements.length; j+=1){\n                        var other = nodesByName[d.requirements[j]].datum();\n                        selectable = selectable && other.selected;\n                        d3\n                            .transition()\n                            .duration(api.durations.activateLink)\n                            .select(\"#\"+other.name+\"-\"+d.name)\n                            .style(\"stroke\",other.selected? \"#FFBB33\": \"#ccc\");\n                    }\n                }\n                if(selectable){\n                    nodesByName[name]\n                        .transition()\n                        .duration(api.durations.activateLink)\n                        .select(\"rect\").style(\"stroke\", \"#FFBB33\");\n                }\n\n            }\n        }\n    };\n    return api;\n}(techTree || {}));\n","var techTree = (function(api){\n    api.setupImageUtils = function setupImageUtils(container){\n        container.append(\"filter\")\n            .attr(\"id\",\"desaturate\")\n            .append(\"feColorMatrix\")\n            .attr(\"type\",\"matrix\")\n            .attr(\"values\",\"0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0\");\n\n        var shadow = container\n            .append(\"filter\")\n            .attr(\"id\",\"dropshadow\")\n            .attr(\"filterUnits\",\"userSpaceOnUse\")\n            .attr(\"color-interpolation-filters\",\"sRGB\")\n            .attr(\"height\",\"130%\")\n            .append(\"feGaussianBlur\")\n            .attr(\"stdDeviation\",\"2\")\n            .append(\"feComponentTransfer\")\n            .attr(\"in\",\"SourceAlpha\")\n            .append(\"feFuncR\")\n            .attr(\"type\",\"discrete\")\n            .attr(\"tableValues\",\"0\")\n            ;\n        shadow\n            .append(\"feOffset\")\n            .attr(\"dx\",\"2\")\n            .attr(\"dy\",\"2\")\n            .attr(\"result\",\"offsetblur\")\n            .append(\"feMerge\")\n            .append(\"feMergeNode\")\n            .attr(\"in\",\"SourceGraphics\");\n            //.append(\"feMergeNode\");\n\n        if(api.settings.useSpriteSheet) {\n            var offset;\n            Object.keys(api.offsets).forEach(function (offsetKey) {\n                offset = api.offsets[offsetKey];\n                d3.select(\"svg\")\n                    .append(\"clipPath\")\n                    .attr(\"id\", \"clip-\" + offsetKey)\n                    .append(\"rect\")\n                    .attr(\"x\", offset.x)\n                    .attr(\"y\", offset.y)\n                    .attr(\"width\", offset.w)\n                    .attr(\"height\", offset.h);\n            });\n        }\n    };\n    return api;\n}(techTree || {}));\n","var techTree = (function(api){\n    api.createTreeFromJSON = function(config){\n        d3.json(config.offsetsFileName, function(error, jsonOffsets){\n            if (error) {return console.warn(error);}\n            d3.json(config.dataFileName, function(error, json) {\n                if (error) {return console.warn(error);}\n                d3.json(config.settingsFileName, function(error, settings) {\n                    if (error) {return console.warn(error);}\n                    techTree.createTree(json.nodes, settings, jsonOffsets);\n                });\n            });\n        });\n    };\n\n    return api;\n}(techTree || {}));\n","var techTree = (function(api){\n    var svg, linksData, nodesByName, nodesDataMap;\n\n    var depths = {};\n    api._clear = function _clear(){\n        linksData =[];\n        nodesByName = {};\n        nodesDataMap = {};\n        depths = {};\n    };\n    api.deleteTree = function deleteTree(){\n        d3.select(api.settings.wrapper).select(\"svg\").remove();\n        api._clear();\n    };\n    api.appendSVG = function appendSVG(){\n        var top = api.dimensions.margin.top;\n        var left = api.dimensions.margin.left;\n        api.dimensions.svgWidth = api.dimensions.svgInitialWidth - api.dimensions.margin.right - left;\n        api.dimensions.svgHeight = api.dimensions.svgInitialHeight - api.dimensions.margin.bottom - top;\n        svg = d3.select(api.settings.wrapper)\n            .append(\"svg\")\n            .attr(\"width\", api.dimensions.svgWidth)\n            .attr(\"height\", api.dimensions.svgHeight)\n            .append(\"g\")\n            .attr(\"transform\", \"translate(\" + left + \",\" + top + \")\");\n    };\n    api.parseNodesData = function parseNodesData(){\n        var nodesData = api.nodesData;\n        nodesData.forEach(function (nodeData) {\n            nodesDataMap[nodeData.name] = nodeData;\n        });\n\n        nodesData.forEach(function (nodeData) {\n            depths[nodeData.depth] = depths[nodeData.depth]+1 || 1;\n            nodeData.requirements = nodeData.requirements || [];\n            nodeData.requirements.forEach(function(r){\n                linksData.push({\n                    source: nodesDataMap[r],\n                    target: nodeData\n                });\n            });\n            nodeData._depthElementCount = depths[nodeData.depth];\n        });\n        nodesData.forEach(function (d) {\n            api.orientNodes(d, depths);\n        });\n    };\n    api.createTree = function createTree(jsonNodesData,settings, offsets){\n        api._clear();\n        api.nodesData = jsonNodesData;\n        api.loadSettings(settings);\n        api.loadOffsets(offsets);\n        api.appendSVG();\n        api.setupImageUtils(svg);\n        api.parseNodesData();\n\n        var w = api.dimensions.nodeInnerWidth + 2*api.dimensions.nodeInnerBorder;\n        var h = api.dimensions.nodeInnerHeight + 2*api.dimensions.nodeInnerBorder;\n        d3.layout.force()\n            .nodes(d3.values(api.nodesData))\n            .links(linksData)\n            .size([w, h])\n            .start();\n\n        api.init();\n        api.nodesData.forEach(function (d) {\n            if(!d.requirements || d.requirements.length < 1 || d.selected)\n            {\n                nodesByName[d.name].select(\"rect\").style(\"fill\",\"#ffcf70\").style(\"stroke\",\"#FFBB33\");\n            }\n        });\n\n    };\n    api.init = function init(){\n            // initialize the nodes\n            var nodes = svg.selectAll(\"g.node\").data(api.nodesData);\n            api.initializeNodes(nodes, nodesByName);\n\n            // initialize the links\n            var links = svg.selectAll(\"path.link\")\n                .data(linksData, function (d) {\n                    return d.source.name + \"-\" + d.target.name;\n                });\n            api.initializeLinks(links);\n    };\n    return api;\n}(techTree || {}));\n"],"sourceRoot":"/source/"}